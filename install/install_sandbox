#!/bin/bash -x
#==================================================#
# BUILDS THE CATAMIPORTAL SERVER FROM A FRESH
# INSTALL OF UBUNTU
# -------------------------------------------------#
# USE
#
# sudo ./destroy  # kills any old dbases
# opt 1)
# sudo ./install_sandbox -u <username> -p <password> -b <git-branch-name> -h <hostname> -path <install-path>
# opt 2)
#
# CREDENTIAL FILE
# LINE 1 #Comment
# LINE 2 <username>
# LINE 3 <password>
#
#==================================================#
#
# Script needs to be run from the benthobox project path i.e ./install/install_sandbox
#


#revision argument

set -eux

SERVER="http://$(echo $(hostname -I))"
CREDFILE="~/.catami.cred"
BRANCH=""
CURRENT_DIR=$(pwd)
INSTALL_PATH=$(pwd)
SCRIPT_PATH="$(dirname "$(which "$0")")"

CATAMI_HOME="$INSTALL_PATH"
PARENT_PATH="$(dirname "$INSTALL_PATH")"
MEDIA_ROOT="$PARENT_PATH/benthobox-media"
IMPORT_PATH="$MEDIA_ROOT/importedimages"
STATIC_ROOT="$MEDIA_ROOT/static"


#==================================================#
# GRAB THE U_NAME AND PASSWORD
#==================================================#
OPTFIND=1
U_NAME=""
PASSWORD=""

while getopts "u:p:f:b:h:i:" opt; do
    case "$opt" in
    u)
        U_NAME=$OPTARG
        ;;
    p)
        PASSWORD=$OPTARG
        ;;
    f)
        CREDFILE=$OPTARG
        ;;
    b)
        BRANCH=$OPTARG
        ;;
    h)
        SERVER=$OPTARG
        ;;
    esac
done

shift $((OPTFIND-1))

if [ -z ${U_NAME} ] # if no user variable must be passed credfile
then

    USER_HOME=$(eval echo ~${SUDO_USER})
    echo "expecting credential file in :: "${USER_HOME}
    i=0
    while read line; do
        param[$i]=$line
        i=`expr $i + 1`
    done < $CREDFILE

    U_NAME=${param[1]}
    PASSWORD=${param[2]}
fi

echo "user=$U_NAME, password=$PASSWORD, branch=$BRANCH, path=$PATH"

mkdir -p $MEDIA_ROOT

# make media dirs and setup apache to serve imagery
mkdir -p $MEDIA_ROOT/static
mkdir -p $MEDIA_ROOT/importedimages

chmod -R 777 $MEDIA_ROOT

#==
# Configure import script environment path
#==

sed -i "s@sys.path.append.*@sys.path.append('$CATAMI_HOME')@g" $CATAMI_HOME/importers/import.py

#== 
# Prepare Apache
#==

sed -i "s@STATIC_DIRECTORY_PATH@$MEDIA_ROOT/static@g" $SCRIPT_PATH/000-default
sed -i "s@MEDIA_PATH@$MEDIA_ROOT@g" $SCRIPT_PATH/000-default
sed -i "s@WSGI_FILE_PATH@$CATAMI_HOME/benthobox/wsgi.py@g" $SCRIPT_PATH/000-default
sed -i "s@WSGI_FILE_PARENT_DIRECTORY@$CATAMI_HOME/benthobox/@g" $SCRIPT_PATH/000-default

cp $SCRIPT_PATH/000-default /etc/apache2/sites-enabled/000-default.conf

#==
# Update the WSGI file
#==

sed -i "s@BENTHOBOX_DIRECTORY@$CATAMI_HOME@g" $CATAMI_HOME/benthobox/wsgi.py


#==================================================#
# SETUP THE POSGIS TEMPLATE FOR POSTGRESQL
#==================================================#
#start postgres
/etc/init.d/postgresql restart

GEOGRAPHY=0
POSTGIS_SQL=postgis.sql

if [ -d "/usr/share/postgresql/9.3/contrib/postgis-2.1" ]
then
    POSTGIS_SQL_PATH=/usr/share/postgresql/9.3/contrib/postgis-2.1
    GEOGRAPHY=1
fi

su postgres -c "createdb -E UTF8 template_postgis" && \
su postgres -c "( createlang -d template_postgis -l | grep plpgsql || createlang -d template_postgis plpgsql )" && \
su postgres -c "psql -d postgres -c \"UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';\"" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/$POSTGIS_SQL" && \
su postgres -c "psql -d template_postgis -f $POSTGIS_SQL_PATH/spatial_ref_sys.sql" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geometry_columns TO PUBLIC;\"" && \
su postgres -c "psql -d template_postgis -c \"GRANT ALL ON spatial_ref_sys TO PUBLIC;\""

if [ $GEOGRAPHY -eq 1 ]
then
    su postgres -c "psql -d template_postgis -c \"GRANT ALL ON geography_columns TO PUBLIC;\""
fi

#==================================================#
# SETUP THE DATABASE AND USERS
#==================================================#

# if the username does not exist then create it
su postgres -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='$U_NAME'\"" | grep -q 1 || su postgres -c "createuser -Rs -A -d -U postgres $U_NAME"

#su postgres -c "createdb -E utf8 -O $U_NAME -T template_postgis catamidb"

su postgres -c "createdb -E utf8 -O $U_NAME catamidb"
su postgres -c "psql -d catamidb -c \"CREATE EXTENSION postgis;\""
su postgres -c "psql -d catamidb -c \"CREATE EXTENSION postgis_topology;\""

su postgres -c "psql -c \"ALTER USER $U_NAME WITH PASSWORD '$PASSWORD';\""

sed -i '1a#!! Autogenerated by Jujuj catamiportal charm !!' /etc/postgresql/9.3/main/pg_hba.conf
sed -i "2alocal	        all     $U_NAME                  md5"  /etc/postgresql/9.3/main/pg_hba.conf
sed -i '3ahost		all	all	0.0.0.0/0	md5' /etc/postgresql/9.3/main/pg_hba.conf

sed -i 's/#listen_addresses = /listen_addresses =/' /etc/postgresql/9.3/main/postgresql.conf
sed -i "s/localhost/*/" /etc/postgresql/9.3/main/postgresql.conf

sed -i "s/#port = 5432/port = 5432 #sed gen/" /etc/postgresql/9.3/main/postgresql.conf

#juju-log "Restarting postgres"
echo "Restarting postgres"
/etc/init.d/postgresql restart

#==================================================#
# SETUP THE PYTHON ENVIRONMENT
#==================================================#
#juju-log "Setting up the python environment"
easy_install pip

chmod -R 777 $INSTALL_PATH

#why? because otherwise the django-nose install fails.  This is a nose bug over 1 year old. Good work guys.
rm -fr /usr/local/man

#juju-log "Pip installing python dependencies" 
#pip install --upgrade -r requirements.txt
pip install -r requirements.txt

# local_settings.py
#touch $CATAMI_HOME/benthobox/settings.py

#update main django settings for the current server
sed -i "s@DOLLY_SEARCH_URL =.*@DOLLY_SEARCH_URL = \"$SERVER:8080/dolly/search\" @g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@WMS_URL =.*@WMS_URL = \"$SERVER/geoserver/wms\" @g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@WFS_URL =.*@WFS_URL = \"$SERVER/geoserver/wfs\" @g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@IMPORT_PATH.*@IMPORT_PATH = \'$IMPORT_PATH\'@g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@STATIC_ROOT.*@STATIC_ROOT = \'$STATIC_ROOT\'@g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@MEDIA_ROOT.*@MEDIA_ROOT = \'$MEDIA_ROOT\'@g" $CATAMI_HOME/benthobox/settings.py

#configure project username and password
sed -i "s@pocock@$U_NAME@g" $CATAMI_HOME/benthobox/settings.py
sed -i "s@qwer789ASDF456zxcv123@$PASSWORD@g" $CATAMI_HOME/benthobox/settings.py

#juju-log "syncing database"
python manage.py syncdb --noinput

#==================================================#
# SETUP INITIAL MIGRATION FOR SOUTH
#==================================================#

#!!! accounts may need to be after accounts in the following list of apps
#!!! catamidb MUST be migrated first.
#python manage.py migrate catamidb
python manage.py migrate --all
python manage.py syncdb --all --noinput

#load the waffle fixtures for feature switching
#python manage.py loaddata projects/fixtures/catami_classification_tree.json
python manage.py loaddata projects/fixtures/mangrove_classification.json

#this if for django-guardian, make sure users all have the requires permission associated
python manage.py check_permissions

python manage.py collectstatic --noinput

chmod a+rw log/benthobox.log

#juju-log "set up Django superuser"
echo "Configuring Django superuser"
echo "from django.contrib.auth.models import User; User.objects.create_superuser('$U_NAME', 'mathew.wyatt@gmail.com', '$PASSWORD')" | ./manage.py shell

#==================================================#
# SET UP APACHE PORT REVERSE PROXY
#==================================================#
a2enmod proxy_http
a2enmod rewrite
chown -R www-data:www-data $CATAMI_HOME

echo "Benthobox install complete"

#==================================================#
# add the current directory and the parent directory to PYTHONPATH
# sets DJANGO_SETTINGS_MODULE
#==================================================#
export DJANGO_SETTINGS_MODULE=benthobox.settings

echo "... Done"
