"""
NOTE: Only tested for Centos/RHEL 6.6

Dependencies:

pip install fabric
pip install cuisine

How to use me:

# to install on remote server
fab -H {hostname or IP} -u {username} -p {password} deploy:{benthobox username},{benthobox password},{hostname or IP},{git repo for source}

# to wipe installation
fab -H {hostname or IP} -u {username} -p {password} clean

# to start stop services
fab -H {hostname or IP} -u {username} -p {password} start_geoserver
fab .. start_gunicorn
fab .. start_nginx
fab .. start_thumbor
fab .. stop_geoserver
fab .. stop_gunicorn
fab .. stop_nginx
fab .. stop_thumbor

After installation access services at:

# bethobox
http://{hostname}/

# geoserver
http://{hostname}/geoserver

"""






from fabric.api import *
from fabric.colors import red, green, magenta
from cuisine import *
import cuisine


GIT_REPO="git@github.com:jcu-eresearch/MangroveWatch-Shoreview.git"
BENTHOBOX_HOME="/home/benthobox/MangroveWatch-Shoreview"
HOSTNAME=""
IMPORT_PATH="/home/benthobox/data"
STATIC_ROOT="/home/benthobox/static"
MEDIA_ROOT=IMPORT_PATH


def app_user(command):
    '''
    This helper method runs the given command as the webapp user.
    '''
    sudo(command, user='benthobox')


def setup_packages():
    puts(green('Setting up packages'))

    cuisine.select_package("yum")

    with settings(warn_only=True):
        sudo('setenforce Permissive')

        sudo("rpm -ivh http://yum.postgresql.org/9.3/redhat/rhel-6.6-x86_64/pgdg-centos93-9.3-1.noarch.rpm")
        sudo("rpm -ivh http://yum.postgresql.org/9.3/redhat/rhel-6.6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm")

        sudo("rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm")
        #sudo("rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm")

    package_ensure("numpy")
    package_ensure("curl")
    package_ensure("libcurl")
    #package_ensure("libcurl-devel")
    package_ensure("python")
    package_ensure("python-pycurl")
    package_ensure("pyOpenSSL")
    package_ensure("postgresql93 postgresql93-server postgresql93-libs postgresql93-contrib postgresql93-devel")
    package_ensure("postgis2_93")
    package_ensure("python-psycopg2")
    package_ensure("nginx")
    package_ensure("python-setuptools")
    package_ensure("scipy")
    package_ensure("binutils")
    package_ensure("proj-devel")
    package_ensure("gdal")
    package_ensure("git")
    package_ensure("unzip")
    #package_ensure("opencv-python")
    #package_ensure("mod_wsgi")
    package_ensure("python-pip")
    package_ensure("libjpeg-turbo-devel")
    package_ensure( "java-1.7.0-openjdk")
    package_ensure("gcc")


def setup_users():
    puts(green('Creating benthobox user'))

    user_ensure('benthobox')


def setup_folders():
    puts(green('Setting up on-disk folders'))

    with mode_sudo():
        dir_ensure('/home/benthobox/data', owner='benthobox', group='benthobox')
        dir_ensure('/home/benthobox/data/thumbnails', owner='benthobox', group='benthobox')
        dir_ensure('/home/benthobox/static', owner='benthobox', group='benthobox')
        #dir_ensure('/home/benthobox/geoserver', owner='benthobox', group='benthobox')


def configure_postgres(db_username, db_password):
    puts(green('Configuring postgres'))

    with settings(warn_only=True):
        #sudo("systemctl enable postgresql-9.3")
        # for centos7 # sudo("/usr/pgsql-9.3/bin/postgresql93-setup initdb")
        sudo("service postgresql-9.3 initdb")

    sudo('sed -i \'1a#!! Autogenerated by benthobox install !!\' /var/lib/pgsql/9.3/data/pg_hba.conf')
    sudo('sed -i "2alocal	        all     %s                  md5"  /var/lib/pgsql/9.3/data/pg_hba.conf' % db_username)
    sudo('sed -i \'3ahost		all	all	0.0.0.0/0	md5\' /var/lib/pgsql/9.3/data/pg_hba.conf')
    sudo('sed -i \'s/#listen_addresses = /listen_addresses =/\' /var/lib/pgsql/9.3/data/postgresql.conf')
    sudo('sed -i "s/localhost/*/" /var/lib/pgsql/9.3/data/postgresql.conf')
    sudo('sed -i "s/#port = 5432/port = 5432 #sed gen/" /var/lib/pgsql/9.3/data/postgresql.conf')

    sudo("service postgresql-9.3 restart")

    with settings(warn_only=True):
        sudo('su postgres -c "createuser -Rs -A -d -U postgres \'%s\'"' % db_username)

    sudo("su postgres -c \"psql -c \\\\\"ALTER USER {0} WITH PASSWORD '{1}';\\\\\"\"".format(db_username, db_password))
    sudo("su postgres -c \"psql -c \\\\\"ALTER USER %s WITH SUPERUSER;\\\\\"\"" % db_username)
    sudo("su postgres -c \"psql -c \\\\\"CREATE DATABASE catamidb OWNER %s ENCODING \'utf8\'; \\\\\" \"" % db_username)
    sudo("su postgres -c \"psql -d catamidb -c \\\\\"CREATE EXTENSION postgis;\\\\\"\"")
    sudo("su postgres -c \"psql -d catamidb -c \\\\\"CREATE EXTENSION postgis_topology;\\\\\"\"")
    sudo("su postgres -c \"psql -d catamidb -c \\\\\"CREATE EXTENSION fuzzystrmatch;\\\\\"\"")
    sudo("su postgres -c \"psql -d catamidb -c \\\\\"CREATE EXTENSION postgis_tiger_geocoder;\\\\\"\"")


def configure_benthobox(db_username, db_password, git_repo):
    puts(green('Configuring benthobox'))

    with cd('/home/benthobox'):
        with mode_sudo():
            if dir_exists('/home/benthobox/benthobox'):
                with cd('/home/benthobox/benthobox'):
                    run('git checkout -- .')
                    run('git pull')
            else:
                run('git clone {0}'.format(git_repo))

            run('chown -R benthobox:benthobox /home/benthobox')

    with cd('/home/benthobox/MangroveWatch-Shoreview'):

        with settings(warn_only=True):
            sudo('pip install -r requirements.txt')

            sudo('sed -i "s@DOLLY_SEARCH_URL =.*@DOLLY_SEARCH_URL = \\\\\"{0}:8080/dolly/search\\\\\" @g" {1}/benthobox/settings.py'.format(HOSTNAME, BENTHOBOX_HOME))
            sudo('sed -i "s@WMS_URL =.*@WMS_URL = \\\\\"{0}/geoserver/wms\\\\\" @g" {1}/benthobox/settings.py'.format(HOSTNAME, BENTHOBOX_HOME))
            sudo('sed -i "s@WFS_URL =.*@WFS_URL = \\\\\"{0}/geoserver/wfs\\\\\" @g" {1}/benthobox/settings.py'.format(HOSTNAME, BENTHOBOX_HOME))
            sudo('sed -i "s@IMPORT_PATH.*@IMPORT_PATH = \'{0}\'@g" {1}/benthobox/settings.py'.format(IMPORT_PATH, BENTHOBOX_HOME))
            sudo('sed -i "s@STATIC_ROOT.*@STATIC_ROOT = \'{0}\'@g" {1}/benthobox/settings.py'.format(STATIC_ROOT, BENTHOBOX_HOME))
            sudo('sed -i "s@MEDIA_ROOT.*@MEDIA_ROOT = \'{0}\'@g" {1}/benthobox/settings.py'.format(MEDIA_ROOT, BENTHOBOX_HOME))
            sudo('sed -i "s@THUMBNAILER_URL.*@THUMBNAILER_URL = \'{0}/unsafe/136x102/\'@g" {1}/benthobox/settings.py'.format(HOSTNAME, BENTHOBOX_HOME))

            sudo('sed -i "s@pocock@{0}@g" {1}/benthobox/settings.py'.format(db_username, BENTHOBOX_HOME))
            sudo('sed -i "s@qwer789ASDF456zxcv123@{0}@g" {1}/benthobox/settings.py'.format(db_password, BENTHOBOX_HOME))

            sudo('python manage.py syncdb --noinput')
            sudo('python manage.py migrate --all')
            sudo('python manage.py syncdb --all --noinput')
            sudo('python manage.py loaddata projects/fixtures/mangrove_classification_1.0.json')
            sudo('python manage.py check_permissions')
            sudo('python manage.py collectstatic --noinput')
            sudo("echo \"from django.contrib.auth.models import User; User.objects.create_superuser('{0}', 'mathew.wyatt@gmail.com', '{1}')\" | ./manage.py shell".format(db_username, db_password))

            sudo('chown -R benthobox:benthobox /home/benthobox/static')

def configure_geoserver(db_username, db_password):
    puts(green('Configuring geoserver'))

    with cd('/home/benthobox'):
        sudo('wget http://sourceforge.net/projects/geoserver/files/GeoServer/2.7.0/geoserver-2.7.0-bin.zip')
        sudo('unzip geoserver-2.7.0-bin.zip')
        sudo('chmod -R 755 /home/benthobox/geoserver-2.7.0/bin/')
        sudo('sed -i \'1aJAVA_HOME=/usr/lib/jvm/jre-1.7.0\' geoserver-2.7.0/bin/startup.sh')
        sudo('sed -i \'2aGEOSERVER_HOME=/home/benthobox/geoserver-2.7.0\' geoserver-2.7.0/bin/startup.sh')
        sudo('sed -i \'1aJAVA_HOME=/usr/lib/jvm/jre-1.7.0\' geoserver-2.7.0/bin/shutdown.sh')
        sudo('sed -i \'2aGEOSERVER_HOME=/home/benthobox/geoserver-2.7.0\' geoserver-2.7.0/bin/shutdown.sh')

        sudo('cp -r /home/benthobox/MangroveWatch-Shoreview/install/geoserver-config/benthobox /home/benthobox/geoserver-2.7.0/data_dir/workspaces/')

        sudo('sed -i "s@the_username@%s@g" /home/benthobox/geoserver-2.7.0/data_dir/workspaces/benthobox/catamidb/datastore.xml' % db_username)
        sudo('sed -i "s@the_password@%s@g" /home/benthobox/geoserver-2.7.0/data_dir/workspaces/benthobox/catamidb/datastore.xml' % db_password)

        # relace the host with given host
        sudo('sed -i "s@the_host@%s@g" /home/benthobox/geoserver-2.7.0/data_dir/workspaces/benthobox/catamidb/datastore.xml' % HOSTNAME)


    puts(red('! Don\'t forget to change geoserver password !'))


def configure_thumbor():
    sudo('cp /home/benthobox/MangroveWatch-Shoreview/install/thumbor.conf /home/benthobox/data/thumbnails/')


def start_thumbor():
    sudo('thumbor -c /home/benthobox/data/thumbnails/thumbor.conf > /home/benthobox/MangroveWatch-Shoreview/log/thumbor.log')


def stop_thumbor():
    sudo('pkill -f thumbor')


def start_gunicorn():
    with cd('/home/benthobox/MangroveWatch-Shoreview'):
        sudo('gunicorn --workers=5 --env DJANGO_SETTINGS_MODULE=benthobox.settings benthobox.wsgi > /home/benthobox/MangroveWatch-Shoreview/log/benthobox.log')


def stop_gunicorn():
    sudo('pkill -f gunicorn')


def start_geoserver():
    sudo('/home/benthobox/geoserver-2.7.0/bin/startup.sh')


def stop_geoserver():
    sudo('/home/benthobox/geoserver-2.7.0/bin/shutdown.sh')


def status():
    with settings(warn_only=True):
        sudo('ps aux | grep gunicorn')
        sudo('ps aux | grep thumbor')
        sudo('ps aux | grep nginx')
        sudo('ps aux | grep geoserver')


def configure_nginx(ssl_certificate_location='/etc/ssl/certs/cacert.pem', ssl_certificate_key_location='/etc/ssl/certs/privkey.pem'):
    puts(green('Configuring nginx'))

    config_template = text_strip_margin('''
    |
    | user  benthobox;
    | worker_processes  1;
    | error_log  /var/log/nginx/error.log;
    | pid        /run/nginx.pid;
    | events {
    |    worker_connections  1024;
    |   }
    |
    |
    | http {
    |
    |   include       /etc/nginx/mime.types;
    |   default_type  application/octet-stream;
    |
    |   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    |                      '$status $body_bytes_sent "$http_referer" '
    |                      '"$http_user_agent" "$http_x_forwarded_for"';
    |
    |   access_log  /var/log/nginx/access.log  main;
    |
    |   sendfile        on;
    |   keepalive_timeout  65;
    |
    |   upstream thumborbe {
    |        server 127.0.0.1:8888;
    |   }
    |
    | server {
    |
    |   listen 443 ;
    |   server_name _;
    |   server_name_in_redirect off;
    |   ssl on;
    |   ssl_certificate ''' + ssl_certificate_location + ''';
    |   ssl_certificate_key ''' + ssl_certificate_key_location + ''';
    |   server_tokens off;
    |
    |   location /splash {
    |       proxy_pass http://127.0.0.1:8000/splash;
    |       proxy_redirect off;
    |       proxy_set_header Host $host;
    |       proxy_set_header   X-Real-IP        $remote_addr;
    |       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    |   }
    |
    |   location /accounts {
    |       proxy_pass http://127.0.0.1:8000/accounts;
    |       proxy_redirect off;
    |       proxy_set_header Host $host;
    |       proxy_set_header   X-Real-IP        $remote_addr;
    |       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    |   }
    |
    |   location /admin {
    |       proxy_pass http://127.0.0.1:8000/admin;
    |       proxy_redirect off;
    |       proxy_set_header Host $host;
    |       proxy_set_header   X-Real-IP        $remote_addr;
    |       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    |   }
    |
    |   location /static/ {
    |       alias /home/benthobox/static/;
    |       autoindex on;
    |   }
    |
    |   location /media/ {
    |       alias /home/benthobox/data/;
    |   }
    |
    | }
    |
    |server {
    |   listen 80 default_server;
    |   server_name _;
    |   #server_name_in_redirect off;
    |
    |   location /accounts {
    |        if ($scheme = http) {
    |            rewrite ^ https://$http_host$request_uri? permanent;
    |        }
    |   }
    |
    |   location /splash {
    |        if ($scheme = http) {
    |            rewrite ^ https://$http_host$request_uri? permanent;
    |        }
    |   }
    |
    |   location /admin {
    |        if ($scheme = http) {
    |            rewrite ^ https://$http_host$request_uri? permanent;
    |        }
    |   }
    |
    |   location /static/ {
    |       alias /home/benthobox/static/;
    |       autoindex on;
    |   }
    |
    |   location /media/ {
    |       alias /home/benthobox/data/;
    |   }
    |
    |   location / {
    |       proxy_pass http://127.0.0.1:8000/;
    |       proxy_redirect off;
    |       proxy_set_header Host $host;
    |       proxy_set_header   X-Real-IP        $remote_addr;
    |       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    |       proxy_buffering off;
    |   }
    |
    |   location /geoserver {
    |       proxy_pass http://127.0.0.1:8080/geoserver;
    |       proxy_redirect off;
    |       proxy_set_header Host $host;
    |       proxy_set_header   X-Real-IP        $remote_addr;
    |       proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    |   }
    |
    |   location /unsafe {
    |       proxy_pass http://thumborbe$request_uri;
    |   }
    |
    |}
    |}
    |
    ''')

    if file_exists('/etc/nginx/nginx.conf'):
        sudo('mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.original')

    with mode_sudo():
        with settings(warn_only=True):
            file_write('/etc/nginx/nginx.conf', config_template)
            run("mkdir /run")

    #SE linux persmission
    #sudo('setsebool -P httpd_can_network_connect 1')
    #sudo("systemctl enable nginx")
    #sudo('service nginx reload')


def stop_nginx():
    with settings(warn_only=True):
        sudo('service nginx stop')
        sudo('pkill nginx')


def start_nginx():
    sudo('service nginx start')


def configure(db_username, db_password, git_repo, ssl_certificate_location, ssl_certificate_key_location):
    puts(green('Configuring packages'))
    configure_postgres(db_username, db_password)
    configure_benthobox(db_username, db_password, git_repo)
    configure_geoserver(db_username, db_password)
    configure_thumbor()
    configure_nginx(ssl_certificate_location, ssl_certificate_key_location)


def deploy(db_username, db_password, hostname, git_repo, ssl_certificate_location, ssl_certificate_key_location):

    global HOSTNAME, GIT_REPO

    HOSTNAME = "http://"+hostname
    GIT_REPO = git_repo

    if db_username is None or db_password is None or hostname is None or git_repo is None:
        print "Exiting, please provide valid credentials: fab deploy:{username},{password},{hostname},{git_password}"
        sys.exit()

    cuisine.select_package("yum")

    with settings(warn_only=True):
        sudo('setenforce Permissive')

    puts(green('Starting deployment'))

    setup_users()
    setup_folders()
    setup_packages()

    configure(db_username, db_password, git_repo, ssl_certificate_location, ssl_certificate_key_location)

    #start_geoserver()
    #start_gunicorn()
    #start_nginx()
    #start_thumbor()


def clean():

    puts(magenta('! Wiping everything !'))

    with settings(warn_only=True):

        stop_geoserver()
        stop_gunicorn()
        stop_nginx()
        stop_thumbor()

        with mode_sudo():
            run("service postgresql-9.3 restart")
            sudo("su postgres -c \"dropdb catamidb\"")
            dir_remove("/home/benthobox")
            user_remove("benthobox")


def vagrant():
    "Using Vagrant for development testing."
    env.user = 'vagrant'
    env.hosts = ['127.0.0.1:2222']

    # Check vagrant machine status and power it up if off
    status = cuisine.run_local('vagrant status | grep default')
    if 'running' in status:
        puts('Vagrant already up.')
    else:
        puts("Vagrant VM powered off so starting...")
        cuisine.run_local('vagrant up')
        puts("Vagrant up!")
